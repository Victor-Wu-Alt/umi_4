"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRouteComponents = exports.getRoutes = exports.getApiRoutes = void 0;
const core_1 = require("@umijs/core");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const getModuleExports_1 = require("./getModuleExports");
// get api routes
async function getApiRoutes(opts) {
    const routes = (0, core_1.getConventionRoutes)({
        base: opts.api.paths.absApiRoutesPath,
        prefix: '',
    });
    function localPath(path) {
        if (path.charAt(0) !== '.') {
            return `./${path}`;
        }
        {
            return path;
        }
    }
    for (const id of Object.keys(routes)) {
        if (routes[id].file) {
            // TODO: cache for performance
            const file = (0, path_1.isAbsolute)(routes[id].file)
                ? routes[id].file
                : utils_1.resolve.sync(localPath(routes[id].file), {
                    basedir: opts.api.paths.absApiRoutesPath,
                    extensions: ['.js', '.jsx', '.tsx', '.ts'],
                });
            routes[id].__content = (0, fs_1.readFileSync)(file, 'utf-8');
        }
    }
    return routes;
}
exports.getApiRoutes = getApiRoutes;
// get route config
async function getRoutes(opts) {
    var _a, _b, _c;
    let routes = null;
    if (opts.api.config.routes) {
        routes = (0, core_1.getConfigRoutes)({
            routes: opts.api.config.routes,
            onResolveComponent(component) {
                if (component.startsWith('@/')) {
                    component = component.replace('@/', '../');
                }
                component = (0, utils_1.winPath)(utils_1.resolve.sync(localPath(component), {
                    basedir: opts.api.paths.absPagesPath,
                    extensions: ['.js', '.jsx', '.tsx', '.ts', '.vue'],
                }));
                component = component.replace(`${opts.api.paths.absSrcPath}/`, '@/');
                return component;
            },
        });
    }
    else {
        routes = (0, core_1.getConventionRoutes)({
            base: ((_a = opts.api.config.conventionRoutes) === null || _a === void 0 ? void 0 : _a.base) || opts.api.paths.absPagesPath,
            exclude: (_b = opts.api.config.conventionRoutes) === null || _b === void 0 ? void 0 : _b.exclude,
            prefix: '',
        });
    }
    function localPath(path) {
        if (path.charAt(0) !== '.') {
            return `./${path}`;
        }
        else {
            return path;
        }
    }
    for (const id of Object.keys(routes)) {
        if (routes[id].file) {
            // TODO: cache for performance
            let file = routes[id].file;
            const basedir = ((_c = opts.api.config.conventionRoutes) === null || _c === void 0 ? void 0 : _c.base) || opts.api.paths.absPagesPath;
            if (!(0, path_1.isAbsolute)(file)) {
                if (file.startsWith('@/')) {
                    file = file.replace('@/', '../');
                }
                file = utils_1.resolve.sync(localPath(file), {
                    basedir,
                    extensions: ['.js', '.jsx', '.tsx', '.ts', '.vue'],
                });
            }
            const isJSFile = /.[jt]sx?/.test(file);
            routes[id].__content = (0, fs_1.readFileSync)(file, 'utf-8');
            routes[id].__absFile = file;
            routes[id].__isJSFile = isJSFile;
            if (opts.api.config.clientLoader) {
                routes[id].__exports =
                    isJSFile && (0, fs_1.existsSync)(file)
                        ? await (0, getModuleExports_1.getModuleExports)({
                            file,
                        })
                        : [];
                routes[id].__hasClientLoader =
                    routes[id].__exports.includes('clientLoader');
                routes[id].clientLoader = `clientLoaders['${id}']`;
            }
        }
    }
    // layout routes
    const absSrcPath = opts.api.paths.absSrcPath;
    const absLayoutPath = (0, utils_1.tryPaths)([
        (0, path_1.join)(opts.api.paths.absSrcPath, 'layouts/index.tsx'),
        (0, path_1.join)(opts.api.paths.absSrcPath, 'layouts/index.vue'),
    ]);
    const layouts = (await opts.api.applyPlugins({
        key: 'addLayouts',
        initialValue: [
            absLayoutPath && {
                id: '@@/global-layout',
                file: (0, utils_1.winPath)(absLayoutPath),
            },
        ].filter(Boolean),
    })).map((layout) => {
        // prune local path prefix, avoid mix in outputs
        layout.file = layout.file.replace(new RegExp(`^${absSrcPath}`), '@');
        return layout;
    });
    for (const layout of layouts) {
        (0, core_1.addParentRoute)({
            addToAll: true,
            target: {
                id: layout.id,
                path: '/',
                file: layout.file,
                parentId: undefined,
                absPath: '/',
            },
            routes,
            test: layout.test,
        });
    }
    // patch routes
    for (const id of Object.keys(routes)) {
        await opts.api.applyPlugins({
            key: 'onPatchRoute',
            args: {
                route: routes[id],
            },
        });
    }
    routes = await opts.api.applyPlugins({
        key: 'modifyRoutes',
        initialValue: routes,
    });
    return routes;
}
exports.getRoutes = getRoutes;
async function getRouteComponents(opts) {
    const imports = Object.keys(opts.routes)
        .map((key) => {
        const route = opts.routes[key];
        if (!route.file) {
            return `'${key}': () => import( './EmptyRoute'),`;
        }
        if (route.hasClientLoader) {
            route.file = (0, path_1.join)(opts.api.paths.absTmpPath, 'pages', route.id.replace(/[\/\-]/g, '_') + '.js');
        }
        // e.g.
        // component: () => <h1>foo</h1>
        // component: (() => () => <h1>foo</h1>)()
        if (route.file.startsWith('(')) {
            return `'${key}': () => Promise.resolve(${route.file}),`;
        }
        const path = (0, path_1.isAbsolute)(route.file) || route.file.startsWith('@/')
            ? route.file
            : `${opts.prefix}${route.file}`;
        return `'${key}': () => import(/* webpackChunkName: "${key.replace(/[\/-]/g, '_')}" */'${(0, utils_1.winPath)(path)}'),`;
    })
        .join('\n');
    return `{\n${imports}\n}`;
}
exports.getRouteComponents = getRouteComponents;
