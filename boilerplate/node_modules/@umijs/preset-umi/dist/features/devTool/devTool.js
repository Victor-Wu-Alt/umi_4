"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const devToolAppDist = (0, path_1.join)(__dirname, '../../../devToolAppDist');
const assetsDir = (0, path_1.join)(__dirname, '../../../assets');
exports.default = (api) => {
    api.addBeforeMiddlewares(async () => {
        // get loading html
        const $ = await api.applyPlugins({
            key: 'modifyDevToolLoadingHTML',
            type: api.ApplyPluginsType.modify,
            initialValue: utils_1.cheerio.load((0, fs_1.readFileSync)((0, path_1.join)(assetsDir, 'bundle-status.html'), 'utf-8')),
        });
        const loadingHtml = $.html();
        return [
            (req, res, next) => {
                const { path } = req;
                const enableVite = api.appData.vite;
                // api
                if (path.startsWith('/__umi/api/')) {
                    const shortPath = path.replace('/__umi/api/', '');
                    if (shortPath === 'config') {
                        return res.json(api.config);
                    }
                    if (shortPath === 'app-data') {
                        return res.json(api.appData);
                    }
                    if (shortPath === 'bundle-status') {
                        const isMFSUEnable = api.config.mfsu !== false;
                        return res.json({
                            bundleStatus: api.appData.bundleStatus,
                            ...(isMFSUEnable && !enableVite
                                ? {
                                    mfsuBundleStatus: api.appData.mfsuBundleStatus,
                                }
                                : {}),
                        });
                    }
                    return next();
                }
                // static
                if (!process.env.DEVTOOL_LOCAL && path.startsWith('/__umi/')) {
                    const shortPath = path.replace('/__umi/', '');
                    if (shortPath !== '' && (0, fs_1.existsSync)((0, path_1.join)(devToolAppDist, shortPath))) {
                        return res.sendFile((0, path_1.join)(devToolAppDist, shortPath));
                    }
                    else {
                        return res.sendFile((0, path_1.join)(devToolAppDist, 'index.html'));
                    }
                }
                // bundle status
                const isDone = api.appData.bundleStatus.done &&
                    (enableVite ||
                        api.config.mfsu === false ||
                        api.appData.mfsuBundleStatus.done);
                if (!isDone) {
                    res.setHeader('Content-Type', 'text/html');
                    res.send(loadingHtml);
                    return;
                }
                return next();
            },
        ];
    });
};
