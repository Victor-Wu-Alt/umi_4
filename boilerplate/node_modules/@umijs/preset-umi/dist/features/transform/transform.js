"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const code_frame_1 = require("@umijs/bundler-utils/compiled/babel/code-frame");
const utils_1 = require("@umijs/utils");
const babelPlugin_1 = __importDefault(require("./babelPlugin"));
const CodeFrameError_1 = __importDefault(require("./CodeFrameError"));
exports.default = (api) => {
    api.addBeforeBabelPresets(() => {
        return [
            {
                plugins: [
                    [
                        babelPlugin_1.default,
                        {
                            cwd: api.cwd,
                            absTmpPath: api.paths.absTmpPath,
                            onCheckCode({ args }) {
                                try {
                                    api.applyPlugins({
                                        key: 'onCheckCode',
                                        args: {
                                            ...args,
                                            CodeFrameError: CodeFrameError_1.default,
                                        },
                                        sync: true,
                                    });
                                }
                                catch (err) {
                                    if (err instanceof CodeFrameError_1.default) {
                                        // throw with babel code frame error
                                        throw new Error(`\n${(0, code_frame_1.codeFrameColumns)(args.code, err.location, {
                                            highlightCode: true,
                                            message: err.message,
                                        })}\n`);
                                    }
                                    else if (err instanceof Error) {
                                        // throw normal error with red text color
                                        throw new Error(utils_1.chalk.redBright(err.message));
                                    }
                                    else {
                                        // log error
                                        api.logger.error(err);
                                    }
                                }
                            },
                        },
                    ],
                ],
            },
        ];
    });
};
