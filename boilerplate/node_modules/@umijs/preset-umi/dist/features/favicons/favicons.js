"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const FAVICON_FILES = [
    'favicon.ico',
    'favicon.gif',
    'favicon.png',
    'favicon.jpg',
    'favicon.jpeg',
    'favicon.svg',
    'favicon.avif',
    'favicon.webp',
];
function getFaviconFiles(p) {
    return FAVICON_FILES.filter((f) => (0, fs_1.existsSync)((0, path_1.join)(p, f)));
}
exports.default = (api) => {
    api.describe({
        config: {
            schema: (Joi) => Joi.array().items(Joi.string()),
        },
    });
    api.modifyAppData(async (memo) => {
        if (api.config.favicon)
            return memo;
        const faviconFiles = getFaviconFiles(api.paths.absSrcPath);
        if (faviconFiles) {
            memo.faviconFiles = faviconFiles;
        }
        return memo;
    });
    api.addBeforeMiddlewares(() => [
        (req, res, next) => {
            const iconFile = (api.appData.faviconFiles || []).find((file) => req.path === `/${file}`);
            if (!iconFile) {
                next();
            }
            else {
                res.sendFile((0, path_1.join)(api.paths.absSrcPath, iconFile));
            }
        },
    ]);
    api.onBuildComplete(({ err }) => {
        if (err)
            return;
        if (api.appData.faviconFiles) {
            api.appData.faviconFiles.forEach((e) => {
                (0, fs_1.copyFileSync)((0, path_1.join)(api.paths.absSrcPath, e), (0, path_1.join)(api.paths.absOutputPath, e));
            });
        }
    });
    api.modifyHTMLFavicon((memo) => {
        // respect favicon config from user, and fallback to auto-detecting files
        if (!memo.length && api.appData.faviconFiles) {
            api.appData.faviconFiles.forEach((e) => {
                memo.push(`${api.config.publicPath}${e}`);
            });
        }
        return memo;
    });
};
