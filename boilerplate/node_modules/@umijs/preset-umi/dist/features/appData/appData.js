"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bundler_utils_1 = require("@umijs/bundler-utils");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const ini_1 = require("../../../compiled/ini");
const os_locale_1 = require("../../../compiled/os-locale");
const watch_1 = require("../../commands/dev/watch");
const scan_1 = require("../../libs/scan");
const routes_1 = require("../tmpFiles/routes");
exports.default = (api) => {
    api.modifyAppData(async (memo) => {
        var _a;
        memo.routes = await (0, routes_1.getRoutes)({
            api,
        });
        memo.apiRoutes = await (0, routes_1.getApiRoutes)({
            api,
        });
        memo.hasSrcDir = api.paths.absSrcPath.endsWith('/src');
        memo.npmClient = api.userConfig.npmClient || (0, utils_1.getNpmClient)({ cwd: api.cwd });
        memo.umi = {
            version: require('../../../package.json').version,
            name: 'Umi',
            importSource: 'umi',
        };
        memo.bundleStatus = {
            done: false,
        };
        if (api.config.mfsu !== false) {
            memo.mfsuBundleStatus = {
                done: false,
            };
        }
        memo.react = {
            version: require((0, path_1.join)(api.config.alias.react, 'package.json')).version,
            path: api.config.alias.react,
        };
        memo['react-dom'] = {
            version: require((0, path_1.join)(api.config.alias['react-dom'], 'package.json'))
                .version,
            path: api.config.alias['react-dom'],
        };
        memo.appJS = await getAppJsInfo();
        memo.locale = await (0, os_locale_1.osLocale)();
        memo.vite = api.config.vite ? {} : undefined;
        const { globalCSS, globalJS } = getGlobalFiles();
        memo.globalCSS = globalCSS;
        memo.globalJS = globalJS;
        const gitDir = findGitDir(api.paths.cwd);
        if (gitDir) {
            const git = {};
            const configPath = (0, path_1.join)(gitDir, 'config');
            if ((0, fs_1.existsSync)(configPath)) {
                const config = (0, fs_1.readFileSync)(configPath, 'utf-8');
                const url = (_a = (0, ini_1.parse)(config)['remote "origin"']) === null || _a === void 0 ? void 0 : _a.url;
                if (url) {
                    git.originUrl = url;
                }
            }
            memo.git = git;
        }
        memo.framework = 'react';
        return memo;
    });
    function findGitDir(dir) {
        if (dir === (0, path_1.resolve)('/')) {
            return null;
        }
        if ((0, fs_1.existsSync)((0, path_1.join)(dir, '.git'))) {
            return (0, path_1.join)(dir, '.git');
        }
        const parent = findGitDir((0, path_1.join)(dir, '..'));
        if (parent) {
            return parent;
        }
        return null;
    }
    // Execute earliest, so that other onGenerateFiles can get it
    api.register({
        key: 'onGenerateFiles',
        async fn(args) {
            if (!args.isFirstTime) {
                api.appData.appJS = await getAppJsInfo();
                const { globalCSS, globalJS } = getGlobalFiles();
                api.appData.globalCSS = globalCSS;
                api.appData.globalJS = globalJS;
            }
        },
        stage: Number.NEGATIVE_INFINITY,
    });
    // used in esmi and vite
    api.register({
        key: 'updateAppDataDeps',
        async fn() {
            const resolver = (0, scan_1.createResolver)({
                alias: api.config.alias,
            });
            api.appData.deps = await (0, scan_1.scan)({
                entry: (0, path_1.join)(api.paths.absTmpPath, 'umi.ts'),
                externals: api.config.externals,
                resolver,
            });
            // FIXME: force include react & react-dom
            if (api.appData.deps['react']) {
                api.appData.deps['react'].version = api.appData.react.version;
            }
            api.appData.deps['react-dom'] = {
                version: api.appData.react.version,
                matches: ['react-dom'],
                subpaths: [],
            };
        },
    });
    async function getAppJsInfo() {
        for (const path of (0, watch_1.expandJSPaths)((0, path_1.join)(api.paths.absSrcPath, 'app'))) {
            if ((0, fs_1.existsSync)(path)) {
                const [_, exports] = await (0, bundler_utils_1.parseModule)({
                    path,
                    content: (0, fs_1.readFileSync)(path, 'utf-8'),
                });
                return {
                    path,
                    exports,
                };
            }
        }
        return null;
    }
    function getGlobalFiles() {
        const absSrcPath = api.paths.absSrcPath;
        const existsAndPushFile = (memo, file) => {
            if ((0, fs_1.existsSync)(file)) {
                memo.push(file);
            }
            return memo;
        };
        const globalCSS = (0, watch_1.expandCSSPaths)((0, path_1.join)(absSrcPath, 'global')).reduce(existsAndPushFile, []);
        const globalJS = (0, watch_1.expandJSPaths)((0, path_1.join)(absSrcPath, 'global')).reduce(existsAndPushFile, []);
        return {
            globalCSS,
            globalJS,
        };
    }
};
