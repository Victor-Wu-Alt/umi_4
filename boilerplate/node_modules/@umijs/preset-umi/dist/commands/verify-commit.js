"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
exports.default = (api) => {
    api.describe({
        key: 'verifyCommit',
        config: {
            schema(Joi) {
                return Joi.object({
                    scope: Joi.array().items(Joi.string()),
                    allowEmoji: Joi.boolean(),
                });
            },
        },
    });
    api.registerCommand({
        name: 'verify-commit',
        configResolveMode: 'loose',
        fn({ args }) {
            var _a, _b;
            api.logger.info('verify-commit');
            const msgPath = args._[0];
            (0, assert_1.default)(msgPath, 'msgPath is required');
            let msg = (0, fs_1.readFileSync)(msgPath, 'utf-8').trim();
            msg = removeComment(msg);
            // ref:
            // https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit-message-header
            const emoji = `(((\ud83c[\udf00-\udfff])|(\ud83d[\udc00-\ude4f\ude80-\udeff])|[\u2600-\u2B55]) )?`;
            const scope = ((_a = api.config.verifyCommit) === null || _a === void 0 ? void 0 : _a.scope) || [
                'feat',
                'fix',
                'docs',
                'style',
                'refactor',
                'perf',
                'test',
                'workflow',
                'build',
                'ci',
                'chore',
                'types',
                'wip',
                'release',
                'dep',
                'example',
                'Merge',
            ];
            const commitRE = new RegExp(`^${((_b = api.config.verifyCommit) === null || _b === void 0 ? void 0 : _b.allowEmoji) ? emoji : ''}(revert: )?(${scope.join('|')})(\\(.+\\))?: .{1,50}`);
            if (!commitRE.test(msg)) {
                console.log();
                console.log(`Error: ${utils_1.chalk.red(`Invalid commit message format.`)}`);
                console.log();
                console.log(`Proper commit message format is required for automated changelog generation.`);
                console.log(`Examples:`);
                console.log();
                console.log(utils_1.chalk.green(`  chore(release): update changelog`));
                console.log(utils_1.chalk.green(`  fix(core): handle events on blur (close #28)`));
                console.log();
                process.exit(1);
            }
        },
    });
};
function removeComment(msg) {
    return msg.replace(/^#.*[\n\r]*/gm, '');
}
