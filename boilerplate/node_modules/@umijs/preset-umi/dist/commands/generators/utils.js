"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trim = exports.promptsExitWhenCancel = exports.getUmiJsPlugin = exports.GeneratorHelper = exports.checkStatus = void 0;
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const set_1 = require("../config/set");
function hasDeps({ name, pkg }) {
    var _a, _b;
    return ((_a = pkg.dependencies) === null || _a === void 0 ? void 0 : _a[name]) || ((_b = pkg.devDependencies) === null || _b === void 0 ? void 0 : _b[name]);
}
function checkStatus({ pkg }) {
    let needInstall = true;
    // 有以下依赖时不需要安装 @umijs/plugins
    if (hasDeps({ pkg, name: '@umijs/plugins' }) ||
        hasDeps({ pkg, name: '@umijs/max' }) ||
        hasDeps({ pkg, name: '@alipay/bigfish' })) {
        needInstall = false;
    }
    let needConfigPlugins = true;
    // 有以下依赖时不需要配置依赖
    if (hasDeps({ pkg, name: '@umijs/max' }) ||
        hasDeps({ pkg, name: '@alipay/bigfish' })) {
        needConfigPlugins = false;
    }
    return {
        needInstall,
        needConfigPlugins,
    };
}
exports.checkStatus = checkStatus;
class GeneratorHelper {
    constructor(api) {
        this.api = api;
        const { needInstall, needConfigPlugins } = checkStatus({
            pkg: api.pkg,
        });
        this.needInstallUmiPlugin = needInstall;
        this.needConfigUmiPlugin = needConfigPlugins;
    }
    setUmirc(key, val) {
        (0, set_1.set)(this.api, key, val);
    }
    appendInternalPlugin(pluginPath) {
        if (this.needConfigUmiPlugin &&
            !(this.api.userConfig.plugins || []).includes(pluginPath)) {
            this.setUmirc('plugins', (this.api.userConfig.plugins || []).concat(pluginPath));
        }
    }
    addDevDeps(deps) {
        const { api } = this;
        const externalDeps = utils_1.lodash.omit(deps, ['@umijs/plugins']);
        if (this.needInstallUmiPlugin) {
            api.pkg.devDependencies = {
                ...api.pkg.devDependencies,
                ...deps,
            };
            (0, fs_1.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));
            utils_1.logger.info('Write package.json');
        }
        else if (!utils_1.lodash.isEmpty(externalDeps)) {
            api.pkg.devDependencies = {
                ...api.pkg.devDependencies,
                ...externalDeps,
            };
            (0, fs_1.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));
            utils_1.logger.info('Write package.json');
        }
    }
    addScript(name, cmd) {
        var _a, _b, _c;
        const { api } = this;
        if (((_a = api.pkg.scripts) === null || _a === void 0 ? void 0 : _a[name]) && ((_b = api.pkg.scripts) === null || _b === void 0 ? void 0 : _b[name]) !== cmd) {
            utils_1.logger.warn(`scripts.${name} = "${(_c = api.pkg.scripts) === null || _c === void 0 ? void 0 : _c[name]}" already exists, will be overwritten with "${cmd}"!`);
        }
        api.pkg.scripts = {
            ...api.pkg.scripts,
            [name]: cmd,
        };
        (0, fs_1.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));
        utils_1.logger.info('Write package.json');
    }
    installDeps() {
        const { npmClient } = this.api.appData;
        (0, utils_1.installWithNpmClient)({
            npmClient,
        });
        utils_1.logger.info(`Install dependencies with ${npmClient}`);
    }
    async ensureVariableWithQuestion(v, question) {
        if (!v) {
            const res = await promptsExitWhenCancel({
                ...question,
                name: 'variable',
            });
            return res.variable ? res.variable : question.initial;
        }
        return v;
    }
}
exports.GeneratorHelper = GeneratorHelper;
function getUmiJsPlugin() {
    var _a;
    const pkg = require((0, path_1.join)(__dirname, '../../../', 'package.json'));
    const pkgVer = utils_1.semver.parse(pkg.version);
    const umijsPluginVersion = ((_a = pkgVer === null || pkgVer === void 0 ? void 0 : pkgVer.prerelease) === null || _a === void 0 ? void 0 : _a.length)
        ? pkg.version
        : `^${pkg.version}`;
    return umijsPluginVersion;
}
exports.getUmiJsPlugin = getUmiJsPlugin;
// the definition is copied from prompts.d.ts; if there is a better way to do this, tell me.
function promptsExitWhenCancel(questions, options) {
    return (0, utils_1.prompts)(questions, {
        ...options,
        onCancel: () => {
            process.exit(1);
        },
    });
}
exports.promptsExitWhenCancel = promptsExitWhenCancel;
function trim(s) {
    return (s === null || s === void 0 ? void 0 : s.trim()) || '';
}
exports.trim = trim;
