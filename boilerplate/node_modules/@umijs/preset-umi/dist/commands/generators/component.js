"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentGenerator = void 0;
const core_1 = require("@umijs/core");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const constants_1 = require("../../constants");
const utils_2 = require("./utils");
exports.default = (api) => {
    api.describe({
        key: 'generator:component',
    });
    api.registerGenerator({
        key: 'component',
        name: 'Generate Component',
        description: 'Generate component boilerplate code',
        type: core_1.GeneratorType.generate,
        fn: async (options) => {
            const h = new utils_2.GeneratorHelper(api);
            options.generateFile;
            let componentNames = options.args._.slice(1);
            if (componentNames.length === 0) {
                let name = '';
                name = await h.ensureVariableWithQuestion(name, {
                    type: 'text',
                    message: 'Please input you component Name',
                    hint: 'foo',
                    initial: 'foo',
                    format: (s) => (s === null || s === void 0 ? void 0 : s.trim()) || '',
                });
                componentNames = [name];
            }
            for (const cn of componentNames) {
                await new ComponentGenerator({
                    srcPath: api.paths.absSrcPath,
                    appRoot: api.paths.cwd,
                    generateFile: utils_1.generateFile,
                    componentName: cn,
                }).run();
            }
        },
    });
};
class ComponentGenerator {
    constructor(opts) {
        this.opts = opts;
        const { name, dir } = (0, path_1.parse)(this.opts.componentName);
        this.name = name;
        this.dir = dir;
    }
    async run() {
        const { generateFile, appRoot } = this.opts;
        const capitalizeName = utils_1.lodash.capitalize(this.name);
        const base = (0, path_1.join)(this.opts.srcPath, 'components', this.dir, capitalizeName);
        const indexFile = (0, path_1.join)(base, 'index.ts');
        const compFile = (0, path_1.join)(base, `${capitalizeName}.tsx`);
        await generateFile({
            target: indexFile,
            path: INDEX_TPL,
            baseDir: appRoot,
            data: { compName: capitalizeName },
        });
        await generateFile({
            target: compFile,
            path: COMP_TPL,
            baseDir: appRoot,
            data: { compName: capitalizeName },
        });
    }
}
exports.ComponentGenerator = ComponentGenerator;
const INDEX_TPL = (0, path_1.join)(constants_1.TEMPLATES_DIR, 'generate/component/index.ts.tpl');
const COMP_TPL = (0, path_1.join)(constants_1.TEMPLATES_DIR, 'generate/component/component.tsx.tpl');
