"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@umijs/core");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const utils_2 = require("./utils");
exports.default = (api) => {
    api.describe({
        key: 'generator:dva',
    });
    api.registerGenerator({
        key: 'dva',
        name: 'Enable Dva',
        description: 'Configuration, Dependencies, and Model Files for Dva',
        type: core_1.GeneratorType.enable,
        checkEnable: () => {
            return !api.config.dva;
        },
        disabledDescription: () => `dva has been enabled; you can remove \`dva\` field in ${api.appData.mainConfigFile} then run this again to re-setup.`,
        fn: async () => {
            const h = new utils_2.GeneratorHelper(api);
            h.addDevDeps({
                '@umijs/plugins': (0, utils_2.getUmiJsPlugin)(),
            });
            h.setUmirc('dva', {});
            h.appendInternalPlugin('@umijs/plugins/dist/dva');
            utils_1.logger.info('Update config file');
            // example model
            const modelsPath = (0, path_1.join)(api.paths.absSrcPath, 'models');
            utils_1.fsExtra.outputFileSync((0, path_1.join)(modelsPath, 'count.ts'), `
const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));

export default {
  namespace: 'count',
  state: {
    num: 0,
  },
  reducers: {
    add(state: any) {
      state.num += 1;
    },
  },
  effects: {
    *addAsync(_action: any, { put }: any) {
      yield delay(1000);
      yield put({ type: 'add' });
    },
  },
};
        `);
            utils_1.logger.info('Write example model');
            h.installDeps();
        },
    });
};
