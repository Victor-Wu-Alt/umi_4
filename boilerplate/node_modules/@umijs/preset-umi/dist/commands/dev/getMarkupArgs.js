"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarkupArgs = void 0;
const cheerio_1 = __importDefault(require("@umijs/utils/compiled/cheerio"));
async function getMarkupArgs(opts) {
    var _a;
    const headScripts = await opts.api.applyPlugins({
        key: 'addHTMLHeadScripts',
        initialValue: opts.api.config.headScripts || [],
    });
    const scripts = await opts.api.applyPlugins({
        key: 'addHTMLScripts',
        initialValue: opts.api.config.scripts || [],
    });
    const metas = await opts.api.applyPlugins({
        key: 'addHTMLMetas',
        initialValue: opts.api.config.metas || [],
    });
    const links = await opts.api.applyPlugins({
        key: 'addHTMLLinks',
        initialValue: opts.api.config.links || [],
    });
    const styles = await opts.api.applyPlugins({
        key: 'addHTMLStyles',
        initialValue: opts.api.config.styles || [],
    });
    const favicons = await opts.api.applyPlugins({
        key: 'modifyHTMLFavicon',
        initialValue: [].concat(opts.api.config.favicons || []),
    });
    return {
        mountElementId: opts.api.config.mountElementId,
        base: ((_a = opts.api.config.history) === null || _a === void 0 ? void 0 : _a.type) === 'browser' ? opts.api.config.base : '/',
        routes: opts.api.appData.routes,
        favicons,
        headScripts,
        scripts,
        metas,
        links,
        styles,
        title: opts.api.config.title,
        async modifyHTML(memo, args) {
            let $ = cheerio_1.default.load(memo, {
                // @ts-ignore
                decodeEntities: false,
            });
            $ = await opts.api.applyPlugins({
                key: 'modifyHTML',
                initialValue: $,
                args,
            });
            let html = $.html();
            // TODO: prettier html
            // html = prettier.format(html, {
            //   parser: 'html',
            // });
            return html;
        },
    };
}
exports.getMarkupArgs = getMarkupArgs;
