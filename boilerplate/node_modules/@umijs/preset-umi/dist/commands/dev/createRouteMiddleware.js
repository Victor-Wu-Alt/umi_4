"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRouteMiddleware = void 0;
const server_1 = require("@umijs/server");
const getAssetsMap_1 = require("./getAssetsMap");
const getMarkupArgs_1 = require("./getMarkupArgs");
// TODO: extract to bundler-vite
// refer: https://vitejs.dev/guide/backend-integration.html#backend-integration
const viteRefreshScript = `
import RefreshRuntime from '/@react-refresh'
RefreshRuntime.injectIntoGlobalHook(window)
window.$RefreshReg$ = () => {}
window.$RefreshSig$ = () => (type) => type
window.__vite_plugin_react_preamble_installed__ = true
`;
function createRouteMiddleware(opts) {
    return ({ compiler }) => {
        const { vite } = opts.api.config;
        let webpackStats = null;
        let onStats = null;
        if (!vite) {
            compiler.hooks.done.tap('umiRouteMiddleware', (stats) => {
                webpackStats = stats;
                onStats === null || onStats === void 0 ? void 0 : onStats(stats);
            });
        }
        async function getStats() {
            if (webpackStats)
                return Promise.resolve(webpackStats);
            return new Promise((resolve) => {
                onStats = (stats) => {
                    resolve(stats);
                };
            });
        }
        return async (req, res, next) => {
            var _a;
            const isVue = opts.api.appData.framework === 'vue';
            const viteScripts = [
                // add noshim attr for skip import-maps shim logic for this modules
                {
                    content: !isVue ? viteRefreshScript : '',
                    noshim: '',
                },
                { src: '/@vite/client', noshim: '' },
                opts.api.appData.hasSrcDir ? '/src/.umi/umi.ts' : '/.umi/umi.ts',
            ];
            const markupArgs = await (0, getMarkupArgs_1.getMarkupArgs)(opts);
            let assetsMap = {};
            if (!vite) {
                const stats = await getStats();
                assetsMap = (0, getAssetsMap_1.getAssetsMap)({
                    stats,
                    publicPath: opts.api.config.publicPath,
                });
            }
            const requestHandler = await (0, server_1.createRequestHandler)({
                ...markupArgs,
                // css will be injected with style tag in vite mode
                styles: (vite ? [] : assetsMap['umi.css'] || []).concat(markupArgs.styles),
                scripts: (vite ? viteScripts : assetsMap['umi.js'] || []).concat(markupArgs.scripts),
                esmScript: vite,
                historyType: ((_a = opts.api.config.history) === null || _a === void 0 ? void 0 : _a.type) || 'browser',
            });
            requestHandler(req, res, next);
        };
    };
}
exports.createRouteMiddleware = createRouteMiddleware;
