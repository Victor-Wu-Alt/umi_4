"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bundler_utils_1 = require("@umijs/bundler-utils");
const express_1 = __importDefault(require("@umijs/bundler-utils/compiled/express"));
const http_proxy_middleware_1 = require("@umijs/bundler-webpack/compiled/http-proxy-middleware");
const utils_1 = require("@umijs/utils");
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const http_1 = __importDefault(require("http"));
const path_1 = require("path");
// @ts-ignore
const sirv_1 = __importDefault(require("../../compiled/sirv"));
const createMockMiddleware_1 = require("../features/mock/createMockMiddleware");
const getMockData_1 = require("../features/mock/getMockData");
exports.default = (api) => {
    api.registerCommand({
        name: 'preview',
        description: 'locally preview production build',
        details: `
umi preview

# specify hostname
umi preview --host [host]

# specify port
umi preview --port [port]
`,
        fn: async function () {
            // 检查构建的静态资源是否存在
            const distDir = (0, path_1.resolve)(api.cwd, api.paths.absOutputPath);
            (0, assert_1.default)((0, fs_1.existsSync)(distDir), 'build output dir not found, please run umi build');
            const app = (0, express_1.default)();
            // cros
            app.use((_req, res, next) => {
                res.header('Access-Control-Allow-Origin', '*');
                res.header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With');
                res.header('Access-Control-Allow-Methods', 'GET, HEAD, PUT, POST, PATCH, DELETE, OPTIONS');
                next();
            });
            // compression
            app.use(require('@umijs/bundler-webpack/compiled/compression')());
            // proxy
            const { proxy } = api.userConfig;
            if (proxy) {
                Object.keys(proxy).forEach((key) => {
                    const proxyConfig = proxy[key];
                    const target = proxyConfig.target;
                    if (target) {
                        app.use(key, (0, http_proxy_middleware_1.createProxyMiddleware)(key, {
                            ...proxy[key],
                            // Add x-real-url in response header
                            onProxyRes(proxyRes, req) {
                                var _a;
                                proxyRes.headers['x-real-url'] =
                                    ((_a = new URL(req.url || '', target)) === null || _a === void 0 ? void 0 : _a.href) || '';
                            },
                        }));
                    }
                });
            }
            // mock
            app.use((0, createMockMiddleware_1.createMockMiddleware)({
                context: {
                    mockData: (0, getMockData_1.getMockData)({
                        cwd: api.cwd,
                        mockConfig: api.config.mock || {},
                    }),
                },
            }));
            app.use(api.config.base, (0, sirv_1.default)(distDir, {
                etag: true,
                dev: true,
                single: true,
            }));
            // history fallback
            app.use(require('@umijs/bundler-webpack/compiled/connect-history-api-fallback')());
            // https 复用用户配置
            const server = api.userConfig.https
                ? await (0, bundler_utils_1.createHttpsServer)(app, api.userConfig.https)
                : http_1.default.createServer(app);
            if (!server) {
                return null;
            }
            const port = await utils_1.portfinder.getPortPromise({
                port: parseInt(String(api.args.port || 4172), 10),
            });
            const protocol = api.userConfig.https ? 'https:' : 'http:';
            server.listen(port, () => {
                const host = api.args.host && api.args.host !== '0.0.0.0'
                    ? api.args.host
                    : '127.0.0.1';
                utils_1.logger.ready(`App listening at ${utils_1.chalk.green(`${protocol}//${host}:${port}`)}`);
            });
        },
    });
};
