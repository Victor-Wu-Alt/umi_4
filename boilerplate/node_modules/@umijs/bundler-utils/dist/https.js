"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpsServer = exports.resolveHttpsConfig = void 0;
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const spdy_1 = __importDefault(require("spdy"));
const defaultHttpsHosts = [
    'localhost',
    '127.0.0.1',
];
// vite mode requires a key cert
async function resolveHttpsConfig(httpsConfig) {
    // Check if mkcert is installed
    try {
        await utils_1.execa.execa('mkcert', ['--version']);
    }
    catch (e) {
        utils_1.logger.error('[HTTPS] The mkcert has not been installed.');
        utils_1.logger.info('[HTTPS] Please follow the guide to install manually.');
        switch (process.platform) {
            case 'darwin':
                console.log(utils_1.chalk.green('$ brew install mkcert'));
                console.log(utils_1.chalk.gray('# If you use firefox, please install nss.'));
                console.log(utils_1.chalk.green('$ brew install nss'));
                console.log(utils_1.chalk.green('$ mkcert -install'));
                break;
            case 'win32':
                console.log(utils_1.chalk.green('Checkout https://github.com/FiloSottile/mkcert#windows'));
                break;
            case 'linux':
                console.log(utils_1.chalk.green('Checkout https://github.com/FiloSottile/mkcert#linux'));
                break;
            default:
                break;
        }
        throw new Error(`[HTTPS] mkcert not found.`);
    }
    let { key, cert, hosts } = httpsConfig;
    hosts = hosts || defaultHttpsHosts;
    if (!key || !cert) {
        key = (0, path_1.join)(__dirname, 'umi.key.pem');
        cert = (0, path_1.join)(__dirname, 'umi.pem');
    }
    // Generate cert and key files if they are not exist.
    if (!(0, fs_1.existsSync)(key) || !(0, fs_1.existsSync)(cert)) {
        utils_1.logger.wait('[HTTPS] Generating cert and key files...');
        await utils_1.execa.execa('mkcert', [
            '-cert-file',
            cert,
            '-key-file',
            key,
            ...hosts,
        ]);
    }
    return {
        key,
        cert,
    };
}
exports.resolveHttpsConfig = resolveHttpsConfig;
async function createHttpsServer(app, httpsConfig) {
    utils_1.logger.wait('[HTTPS] Starting service in https mode...');
    const { key, cert } = await resolveHttpsConfig(httpsConfig);
    // Create server
    const http2Service = spdy_1.default.createServer({
        key: (0, fs_1.readFileSync)(key, 'utf-8'),
        cert: (0, fs_1.readFileSync)(cert, 'utf-8'),
    }, app);
    return http2Service;
}
exports.createHttpsServer = createHttpsServer;
