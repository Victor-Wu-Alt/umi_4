"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const enhanced_resolve_1 = __importDefault(require("enhanced-resolve"));
const fs_1 = require("fs");
const sortByAffix_1 = require("../utils/sortByAffix");
const resolver = enhanced_resolve_1.default.create({
    mainFields: ['module', 'browser', 'main'],
    extensions: ['.json', '.js', '.jsx', '.ts', '.tsx', '.cjs', '.mjs'],
    // TODO: support exports
    exportsFields: [],
});
async function resolve(context, path) {
    return new Promise((resolve, reject) => {
        resolver(context, path, (err, result) => err ? reject(err) : resolve(result));
    });
}
// https://esbuild.github.io/plugins/#resolve-callbacks
exports.default = (options = {}) => {
    return {
        name: 'alias',
        setup({ onResolve }) {
            const keys = (0, sortByAffix_1.sortByAffix)({ arr: Object.keys(options), affix: '$' });
            keys.forEach((key) => {
                let value = options[key];
                let filter;
                if (key.endsWith('$')) {
                    filter = new RegExp(`^${key}`);
                }
                else {
                    filter = new RegExp(`^${key}$`);
                }
                onResolve({ filter: filter }, async (args) => {
                    const path = await resolve(args.importer, args.path.replace(filter, value));
                    return {
                        path,
                    };
                });
                if (!key.endsWith('/') &&
                    (0, fs_1.existsSync)(value) &&
                    (0, fs_1.statSync)(value).isDirectory()) {
                    const filter = new RegExp(`^${addSlashAffix(key)}`);
                    onResolve({ filter }, async (args) => {
                        const path = await resolve(args.importer, args.path.replace(filter, addSlashAffix(value)));
                        return {
                            path,
                        };
                    });
                }
            });
        },
    };
};
function addSlashAffix(key) {
    if (key.endsWith('/')) {
        return key;
    }
    return `${key}/`;
}
