"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const generator_1 = require("./generator");
exports.default = (api) => {
    api.registerCommand({
        name: 'generate',
        alias: 'g',
        details: `
umi generate
`,
        description: 'generate code snippets quickly',
        configResolveMode: 'loose',
        async fn({ args }) {
            var _a;
            const [type] = args._;
            const runGenerator = async (generator) => {
                await (generator === null || generator === void 0 ? void 0 : generator.fn({
                    args,
                    generateFile: utils_1.generateFile,
                    installDeps: utils_1.installDeps,
                    updatePackageJSON: utils_1.updatePackageJSON,
                }));
            };
            if (type) {
                const generator = api.service.generators[type];
                if (!generator) {
                    throw new Error(`Generator ${type} not found.`);
                }
                if (generator.type === generator_1.GeneratorType.enable) {
                    const enable = await ((_a = generator.checkEnable) === null || _a === void 0 ? void 0 : _a.call(generator, {
                        args,
                    }));
                    if (!enable) {
                        if (typeof generator.disabledDescription === 'function') {
                            utils_1.logger.warn(generator.disabledDescription());
                        }
                        else {
                            utils_1.logger.warn(generator.disabledDescription);
                        }
                        return;
                    }
                }
                await runGenerator(generator);
            }
            else {
                const getEnableGenerators = async (generators) => {
                    var _a;
                    const questions = [];
                    for (const key of Object.keys(generators)) {
                        const g = generators[key];
                        if (g.type === generator_1.GeneratorType.generate) {
                            questions.push({
                                title: `${g.name} -- ${g.description}` || '',
                                value: g.key,
                            });
                        }
                        else {
                            const enable = await ((_a = g === null || g === void 0 ? void 0 : g.checkEnable) === null || _a === void 0 ? void 0 : _a.call(g, {
                                args,
                            }));
                            if (enable) {
                                questions.push({
                                    title: `${g.name} -- ${g.description}` || '',
                                    value: g.key,
                                });
                            }
                        }
                    }
                    return questions;
                };
                const questions = await getEnableGenerators(api.service.generators);
                const { gType } = await (0, utils_1.prompts)({
                    type: 'select',
                    name: 'gType',
                    message: 'Pick generator type',
                    choices: questions,
                });
                await runGenerator(api.service.generators[gType]);
            }
        },
    });
};
