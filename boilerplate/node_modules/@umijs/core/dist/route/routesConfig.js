"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigRoutes = void 0;
const assert_1 = __importDefault(require("assert"));
function getConfigRoutes(opts) {
    const memo = { ret: {}, id: 1 };
    transformRoutes({
        routes: opts.routes,
        parentId: undefined,
        memo,
        onResolveComponent: opts.onResolveComponent,
    });
    return memo.ret;
}
exports.getConfigRoutes = getConfigRoutes;
function transformRoutes(opts) {
    opts.routes.forEach((route) => {
        transformRoute({
            route,
            parentId: opts.parentId,
            memo: opts.memo,
            onResolveComponent: opts.onResolveComponent,
        });
    });
}
function transformRoute(opts) {
    (0, assert_1.default)(!opts.route.children, 'children is not allowed in route props, use routes instead.');
    const id = String(opts.memo.id++);
    const { routes, component, wrappers, ...routeProps } = opts.route;
    let absPath = opts.route.path;
    if ((absPath === null || absPath === void 0 ? void 0 : absPath.charAt(0)) !== '/') {
        const parentAbsPath = opts.parentId
            ? opts.memo.ret[opts.parentId].absPath.replace(/\/+$/, '/') // to remove '/'s on the tail
            : '/';
        absPath = parentAbsPath + absPath;
    }
    opts.memo.ret[id] = {
        ...routeProps,
        path: opts.route.path,
        ...(component
            ? {
                file: opts.onResolveComponent
                    ? opts.onResolveComponent(component)
                    : component,
            }
            : {}),
        parentId: opts.parentId,
        id,
    };
    if (absPath) {
        opts.memo.ret[id].absPath = absPath;
    }
    if (wrappers === null || wrappers === void 0 ? void 0 : wrappers.length) {
        let parentId = opts.parentId;
        let path = opts.route.path;
        wrappers.forEach((wrapper) => {
            const { id } = transformRoute({
                route: { path, component: wrapper },
                parentId,
                memo: opts.memo,
                onResolveComponent: opts.onResolveComponent,
            });
            parentId = id;
            path = '';
        });
        opts.memo.ret[id].parentId = parentId;
        opts.memo.ret[id].path = path;
    }
    if (opts.route.routes) {
        transformRoutes({
            routes: opts.route.routes,
            parentId: id,
            memo: opts.memo,
            onResolveComponent: opts.onResolveComponent,
        });
    }
    return { id };
}
