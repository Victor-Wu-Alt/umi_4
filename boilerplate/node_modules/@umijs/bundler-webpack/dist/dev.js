"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dev = exports.stripUndefined = void 0;
const mfsu_1 = require("@umijs/mfsu");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const webpack_1 = __importDefault(require("../compiled/webpack"));
const config_1 = require("./config/config");
const constants_1 = require("./constants");
const server_1 = require("./server/server");
const types_1 = require("./types");
function stripUndefined(obj) {
    Object.keys(obj).forEach((key) => {
        if (obj[key] === undefined) {
            delete obj[key];
        }
    });
    return obj;
}
exports.stripUndefined = stripUndefined;
async function dev(opts) {
    var _a, _b, _c, _d, _e, _f;
    var _g;
    const enableMFSU = opts.config.mfsu !== false;
    let mfsu = null;
    if (enableMFSU) {
        if (opts.config.srcTranspiler === types_1.Transpiler.swc) {
            utils_1.logger.warn(`Swc currently not supported for use with mfsu, recommended you use srcTranspiler: 'esbuild' in dev.`);
        }
        mfsu = new mfsu_1.MFSU({
            implementor: webpack_1.default,
            buildDepWithESBuild: (_a = opts.config.mfsu) === null || _a === void 0 ? void 0 : _a.esbuild,
            depBuildConfig: {
                extraPostCSSPlugins: ((_b = opts.config) === null || _b === void 0 ? void 0 : _b.extraPostCSSPlugins) || [],
            },
            mfName: (_c = opts.config.mfsu) === null || _c === void 0 ? void 0 : _c.mfName,
            runtimePublicPath: opts.config.runtimePublicPath,
            tmpBase: ((_d = opts.config.mfsu) === null || _d === void 0 ? void 0 : _d.cacheDirectory) ||
                (0, path_1.join)(opts.rootDir || opts.cwd, 'node_modules/.cache/mfsu'),
            onMFSUProgress: opts.onMFSUProgress,
            getCacheDependency() {
                return stripUndefined({
                    version: require('../package.json').version,
                    mfsu: opts.config.mfsu,
                    alias: opts.config.alias,
                    externals: opts.config.externals,
                    theme: opts.config.theme,
                    runtimePublicPath: opts.config.runtimePublicPath,
                    publicPath: opts.config.publicPath,
                });
            },
        });
    }
    const webpackConfig = await (0, config_1.getConfig)({
        cwd: opts.cwd,
        rootDir: opts.rootDir,
        env: types_1.Env.development,
        entry: opts.entry,
        userConfig: opts.config,
        babelPreset: opts.babelPreset,
        extraBabelPlugins: [
            ...(opts.beforeBabelPlugins || []),
            ...((mfsu === null || mfsu === void 0 ? void 0 : mfsu.getBabelPlugins()) || []),
            ...(opts.extraBabelPlugins || []),
        ],
        extraBabelPresets: [
            ...(opts.beforeBabelPresets || []),
            ...(opts.extraBabelPresets || []),
        ],
        extraBabelIncludes: opts.config.extraBabelIncludes,
        extraEsbuildLoaderHandler: (mfsu === null || mfsu === void 0 ? void 0 : mfsu.getEsbuildLoaderHandler()) || [],
        chainWebpack: opts.chainWebpack,
        modifyWebpackConfig: opts.modifyWebpackConfig,
        hmr: true,
        analyze: process.env.ANALYZE,
        cache: opts.cache,
    });
    const depConfig = await (0, config_1.getConfig)({
        cwd: opts.cwd,
        rootDir: opts.rootDir,
        env: types_1.Env.development,
        entry: opts.entry,
        userConfig: opts.config,
        hash: true,
        staticPathPrefix: mfsu_1.MF_DEP_PREFIX,
        name: constants_1.MFSU_NAME,
        chainWebpack: (_e = opts.config.mfsu) === null || _e === void 0 ? void 0 : _e.chainWebpack,
        cache: {
            buildDependencies: (_f = opts.cache) === null || _f === void 0 ? void 0 : _f.buildDependencies,
            cacheDirectory: (0, path_1.join)(opts.rootDir || opts.cwd, 'node_modules', '.cache', 'mfsu-deps'),
        },
    });
    (_g = webpackConfig.resolve).alias || (_g.alias = {});
    // TODO: REMOVE ME
    ['@umijs/utils/compiled/strip-ansi', 'react-error-overlay'].forEach((dep) => {
        // @ts-ignore
        webpackConfig.resolve.alias[dep] = require.resolve(dep);
    });
    await (mfsu === null || mfsu === void 0 ? void 0 : mfsu.setWebpackConfig({
        config: webpackConfig,
        depConfig: depConfig,
    }));
    if (mfsu &&
        webpackConfig.cache &&
        typeof webpackConfig.cache === 'object' &&
        webpackConfig.cache.type === 'filesystem') {
        const webpackCachePath = (0, path_1.join)(webpackConfig.cache.cacheDirectory, `default-development`, 'index.pack');
        const mfsuCacheExists = (0, fs_1.existsSync)(mfsu.depInfo.cacheFilePath);
        const webpackCacheExists = (0, fs_1.existsSync)(webpackCachePath);
        if (webpackCacheExists && !mfsuCacheExists) {
            utils_1.logger.warn(`Invalidate webpack cache since mfsu cache is missing`);
            utils_1.rimraf.sync(webpackConfig.cache.cacheDirectory);
        }
    }
    await (0, server_1.createServer)({
        webpackConfig,
        userConfig: opts.config,
        cwd: opts.cwd,
        beforeMiddlewares: [
            ...((mfsu === null || mfsu === void 0 ? void 0 : mfsu.getMiddlewares()) || []),
            ...(opts.beforeMiddlewares || []),
        ],
        port: opts.port,
        host: opts.host,
        afterMiddlewares: [...(opts.afterMiddlewares || [])],
        onDevCompileDone: opts.onDevCompileDone,
        onProgress: opts.onProgress,
    });
}
exports.dev = dev;
