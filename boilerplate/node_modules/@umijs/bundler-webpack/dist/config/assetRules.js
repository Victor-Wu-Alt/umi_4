"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAssetRules = void 0;
async function addAssetRules(opts) {
    const { config, userConfig } = opts;
    const inlineLimit = parseInt(userConfig.inlineLimit || '10000', 10);
    const rule = config.module.rule('asset');
    rule
        .oneOf('avif')
        .test(/\.avif$/)
        .type('asset')
        .mimetype('image/avif')
        .parser({
        dataUrlCondition: {
            maxSize: inlineLimit,
        },
    })
        .generator({
        filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
    });
    rule
        .oneOf('image')
        .test(/\.(bmp|gif|jpg|jpeg|png)$/)
        .type('asset')
        .parser({
        dataUrlCondition: {
            maxSize: inlineLimit,
        },
    })
        .generator({
        filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
    });
    const fallback = rule
        .oneOf('fallback')
        .exclude.add(/^$/) /* handle data: resources */
        .add(/\.(js|mjs|jsx|ts|tsx)$/)
        .add(/\.(css|less|sass|scss|stylus)$/)
        .add(/\.html$/)
        .add(/\.json$/);
    if (userConfig.mdx) {
        fallback.add(/\.mdx?$/);
    }
    fallback
        .end()
        .type('asset/resource')
        .generator({
        filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
    });
}
exports.addAssetRules = addAssetRules;
