"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSVGRules = void 0;
async function addSVGRules(opts) {
    const { config, userConfig } = opts;
    const { svgr, svgo = {} } = userConfig;
    if (svgr) {
        const svgrRule = config.module.rule('svgr');
        svgrRule
            .test(/\.svg$/)
            .issuer(/\.[jt]sx?$/)
            .type('javascript/auto')
            .use('svgr-loader')
            .loader(require.resolve('../loader/svgr'))
            .options({
            svgoConfig: {
                plugins: [
                    {
                        name: 'preset-default',
                        params: {
                            overrides: {
                                removeTitle: false,
                            },
                        },
                    },
                    'prefixIds',
                ],
                ...svgo,
            },
            ...svgr,
            svgo: !!svgo,
        })
            .end()
            .use('url-loader')
            .loader(require.resolve('@umijs/bundler-webpack/compiled/url-loader'))
            .end();
    }
    if (svgo === false) {
        const svgRule = config.module.rule('svg');
        svgRule
            .test(/\.svg$/)
            .use('url-loader')
            .loader(require.resolve('@umijs/bundler-webpack/compiled/url-loader'));
        return;
    }
    const svgRule = config.module.rule('svg');
    svgRule
        .test(/\.svg$/)
        .use('svgo-loader')
        .loader(require.resolve('@umijs/bundler-webpack/compiled/svgo-loader'))
        .options({ configFile: false, ...svgo })
        .end();
}
exports.addSVGRules = addSVGRules;
