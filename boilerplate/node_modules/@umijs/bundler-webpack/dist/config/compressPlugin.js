"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCompressPlugin = void 0;
// @ts-ignore
const css_minimizer_webpack_plugin_1 = __importDefault(require("@umijs/bundler-webpack/compiled/css-minimizer-webpack-plugin"));
const terser_webpack_plugin_1 = __importDefault(require("../../compiled/terser-webpack-plugin"));
const types_1 = require("../types");
const getEsBuildTarget_1 = require("../utils/getEsBuildTarget");
async function addCompressPlugin(opts) {
    const { config, userConfig, env } = opts;
    const jsMinifier = userConfig.jsMinifier || types_1.JSMinifier.esbuild;
    const cssMinifier = userConfig.cssMinifier || types_1.CSSMinifier.esbuild;
    if (env === types_1.Env.development ||
        process.env.COMPRESS === 'none' ||
        (jsMinifier === types_1.JSMinifier.none && cssMinifier === types_1.CSSMinifier.none)) {
        config.optimization.minimize(false);
        return;
    }
    config.optimization.minimize(true);
    // esbuild transform only allow `string[]` as target
    const esbuildTarget = (0, getEsBuildTarget_1.getEsBuildTarget)({
        targets: userConfig.targets || {},
    });
    let minify;
    let terserOptions;
    if (jsMinifier === types_1.JSMinifier.esbuild) {
        minify = terser_webpack_plugin_1.default.esbuildMinify;
        terserOptions = {
            target: esbuildTarget,
            // remove all comments
            legalComments: 'none',
        };
    }
    else if (jsMinifier === types_1.JSMinifier.terser) {
        minify = terser_webpack_plugin_1.default.terserMinify;
        terserOptions = {
            format: {
                comments: false,
            },
        };
    }
    else if (jsMinifier === types_1.JSMinifier.swc) {
        minify = terser_webpack_plugin_1.default.swcMinify;
    }
    else if (jsMinifier === types_1.JSMinifier.uglifyJs) {
        minify = terser_webpack_plugin_1.default.uglifyJsMinify;
        terserOptions = {
            output: {
                comments: false,
            },
        };
    }
    else if (jsMinifier !== types_1.JSMinifier.none) {
        throw new Error(`Unsupported jsMinifier ${userConfig.jsMinifier}.`);
    }
    terserOptions = {
        ...terserOptions,
        ...userConfig.jsMinifierOptions,
    };
    if (jsMinifier !== types_1.JSMinifier.none) {
        config.optimization.minimizer(`js-${jsMinifier}`).use(terser_webpack_plugin_1.default, [
            {
                extractComments: false,
                minify,
                terserOptions,
            },
        ]);
    }
    let cssMinify;
    let minimizerOptions;
    if (cssMinifier === types_1.CSSMinifier.esbuild) {
        cssMinify = css_minimizer_webpack_plugin_1.default.esbuildMinify;
        minimizerOptions = {
            target: esbuildTarget,
        };
    }
    else if (cssMinifier === types_1.CSSMinifier.cssnano) {
        cssMinify = css_minimizer_webpack_plugin_1.default.cssnanoMinify;
    }
    else if (cssMinifier === types_1.CSSMinifier.parcelCSS) {
        cssMinify = css_minimizer_webpack_plugin_1.default.parcelCssMinify;
    }
    else if (cssMinifier !== types_1.CSSMinifier.none) {
        throw new Error(`Unsupported cssMinifier ${userConfig.cssMinifier}.`);
    }
    minimizerOptions = {
        ...minimizerOptions,
        ...userConfig.cssMinifierOptions,
    };
    config.optimization
        .minimizer(`css-${cssMinifier}`)
        .use(css_minimizer_webpack_plugin_1.default, [
        {
            minify: cssMinify,
            minimizerOptions,
        },
    ]);
}
exports.addCompressPlugin = addCompressPlugin;
