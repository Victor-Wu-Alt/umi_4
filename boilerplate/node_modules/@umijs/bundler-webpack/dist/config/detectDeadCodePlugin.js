"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDetectDeadCodePlugin = void 0;
const types_1 = require("../types");
const detectDeadCode_1 = __importStar(require("./detectDeadCode"));
const defaultOptions = {
    patterns: [`!(${detectDeadCode_1.disabledFolders.join('|')})/**/*.*`],
    exclude: [],
    failOnHint: false,
    detectUnusedFiles: true,
    detectUnusedExport: true,
};
class DetectDeadCodePlugin {
    constructor(options) {
        this.options = defaultOptions;
        this.handleAfterEmit = (compilation, callback) => {
            (0, detectDeadCode_1.default)(compilation, this.options);
            callback();
        };
        if (!options) {
            return;
        }
        this.options = {
            ...this.options,
            ...options,
        };
    }
    apply(compiler) {
        if (!this.options.context) {
            this.options = {
                ...this.options,
                context: compiler.context,
            };
        }
        compiler.hooks.afterEmit.tapAsync('DetectDeadCodePlugin', this.handleAfterEmit);
    }
}
async function addDetectDeadCodePlugin(opts) {
    const { config, userConfig } = opts;
    const isDev = opts.env === types_1.Env.development;
    if (userConfig.deadCode && !isDev) {
        config
            .plugin('detect-dead-code-plugin')
            .use(DetectDeadCodePlugin, [userConfig.deadCode]);
    }
}
exports.addDetectDeadCodePlugin = addDetectDeadCodePlugin;
