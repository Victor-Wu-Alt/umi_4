import type { NextFunction, Request, Response } from '@umijs/bundler-utils/compiled/express';
import webpack, { Configuration } from 'webpack';
import awaitImport from './babelPlugins/awaitImport/awaitImport';
import { DepBuilder } from './depBuilder/depBuilder';
import { DepInfo } from './depInfo';
import { Mode } from './types';
interface IOpts {
    cwd?: string;
    excludeNodeNatives?: boolean;
    exportAllMembers?: Record<string, string[]>;
    getCacheDependency?: Function;
    onMFSUProgress?: Function;
    mfName?: string;
    mode?: Mode;
    tmpBase?: string;
    unMatchLibs?: string[];
    runtimePublicPath?: boolean | string;
    implementor: typeof webpack;
    buildDepWithESBuild?: boolean;
    depBuildConfig: any;
}
export declare class MFSU {
    opts: IOpts;
    alias: Record<string, string>;
    externals: (Record<string, string> | Function)[];
    depInfo: DepInfo;
    depBuilder: DepBuilder;
    depConfig: Configuration | null;
    buildDepsAgain: boolean;
    progress: any;
    onProgress: Function;
    publicPath: string;
    constructor(opts: IOpts);
    asyncImport(content: string): string;
    setWebpackConfig(opts: {
        config: Configuration;
        depConfig: Configuration;
    }): Promise<void>;
    buildDeps(): Promise<void>;
    getMiddlewares(): ((req: Request, res: Response, next: NextFunction) => void)[];
    private getAwaitImportCollectOpts;
    getBabelPlugins(): ({
        onTransformDeps: () => void;
        onCollect: ({ file, data, }: {
            file: string;
            data: {
                unMatched: Set<{
                    sourceValue: string;
                }>;
                matched: Set<{
                    sourceValue: string;
                }>;
            };
        }) => void;
        exportAllMembers: Record<string, string[]> | undefined;
        unMatchLibs: string[] | undefined;
        remoteName: string | undefined;
        alias: Record<string, string>;
        externals: (Function | Record<string, string>)[];
    } | typeof awaitImport)[][];
    getEsbuildLoaderHandler(): any[];
}
export {};
